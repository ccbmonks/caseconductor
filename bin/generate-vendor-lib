#!/usr/bin/env python
# Case Conductor is a Test Case Management system.
# Copyright (C) 2011-12 Mozilla
#
# This file is part of Case Conductor.
#
# Case Conductor is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Case Conductor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Case Conductor.  If not, see <http://www.gnu.org/licenses/>.
"""

Generate a vendor-lib in requirements/vendor, including all pure-Python
project requirements (excludes those listed in requirements/compiled.txt). 
Removes and recreates any "requirements/vendor/lib/".

Due to bugs in pip's "--ignore-installed" flag, this should always be run
inside an empty no-site-packages virtualenv.

Usage: %s

"""
import os.path
import shutil
import sys
import tempfile

import pip

def main(base_dir, argv):
    reqs_dir = os.path.join(base_dir, "requirements")
    dist_dir = os.path.join(reqs_dir, "dist")

    install_type = "pure"

    args = argv[1:]
    if args and args[0] in ["-h", "-?", "--help"]:
        print __doc__ % argv[0]
        return 0

    target_dir = os.path.join(base_dir, "requirements", "vendor", "lib")

    reqs_file = os.path.join(reqs_dir, "%s.txt" % install_type)
    if not os.path.isfile(reqs_file):
        print "Requirements file %s does not exist or is not a file." % reqs_file
        print
        return 1

    tmp_dir = tempfile.mkdtemp("ccui-generate-vendor-lib")

    retval = 0
    try:
        args = ["install", "--no-index", "--ignore-installed",
                '--install-option=--home=%s' % tmp_dir,
                "-f", "file://%s" % dist_dir, "-r", reqs_file]
        print "Running 'pip %s'" % ", ".join(args)
        retval = pip.main(args)
        if os.path.exists(target_dir):
            shutil.rmtree(target_dir)
        shutil.copytree(
            os.path.join(tmp_dir, "lib", "python"),
            os.path.join(target_dir, "python")
            )
    finally:
        shutil.rmtree(tmp_dir)

    return retval


if __name__ == "__main__":
    script = os.path.realpath(os.path.abspath(__file__))
    sys.exit(main(os.path.dirname(os.path.dirname(script)), sys.argv))
